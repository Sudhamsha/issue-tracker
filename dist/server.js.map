{"version":3,"sources":["../server/server.js"],"names":["app","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","db","connect","then","connection","listen","catch","error","get","req","res","collection","find","toArray","metadata","total_count","issues","length","_metadata","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next"],"mappings":"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","file":"server.js","sourcesContent":["'use strict';\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\n\nconst app = express();\napp.use(express.static('public'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(8000, () => {\n    console.log('App started on 8000');\n  });\n}).catch(error => {\n  console.log('ERROR', error);\n});\n\n// Get Issue\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = {total_count: issues.length};\n    res.json({ _metadata: metadata, records: issues });\n  }).catch(error => {\n    console.log('ERROR', error);\n    res.status(500).json({message: `Internal Server Error: ${error}`})\n  });\n});\n\n// Post Issue\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if(!newIssue.status){\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if(err){\n    res.status(422).json({message: `Invalid request: ${err}`});\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({_id: result.insertedId}).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log('ERROR', error);\n    res.status(500).json({ message: `Internal Server Error: ${error}`});\n  });\n});\n"]}